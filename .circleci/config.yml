version: 2.1

# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       workflow_id:
#         type: string 
#     steps:
#       - run:
#           name: Destroy backend
#           when: on_fail
#           command: |
#             aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"

#       - run: 
#           name: Destroy frontend
#           when: on_fail
#           command: |
#             aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       workflow_id: 
#         type: string  
#     steps:
#       - run:
#           name: Revert migrations
#           when: on_fail
#           command: |
#             # SUCCESS=$(curl -H "token: e52b52de-ee26-41a5-86e8-e8dcc3d995a5" --request GET https://api.memstash.io/values/migration_<< parameters.workflow_id >>)
#             SUCCESS=$(curl --insecure  https://kvdb.io/7BxNdfG935QsDip7KHcMTR/migrtion_<< parameters.workflow_id >>)
#             if (( $SUCCESS == 1 ));
#             then
#                 cd ~/project/backend
#                 npm install
#                 npm run migrations:revert
#             fi 
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-deps-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps-{{ checksum "frontend/package-lock.json" }}

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-deps-{{ checksum "backend/package-lock.json" }}
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Build backend
          command: |
            cd backend
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps-{{ checksum "backend/package-lock.json" }}

  test-frontend:
    docker: 
    - image: circleci/node:13.8.0
    steps:
    - checkout
    - restore_cache:
       keys:
         - frontend-deps-{{ checksum "frontend/package-lock.json" }}
    - run:
        name: Install dependencies
        command: |
          cd frontend
          npm install
    - run:
        name: Run frontend unit tests
        command: |
          cd frontend
          npm run test
                
  test-backend:
    docker:
    - image: cimg/node:13.8.0
    steps:
    - checkout
    - restore_cache:
       keys:
         - backend-deps-{{ checksum "backend/package-lock.json" }}
    - run:
        name: Install dependencies
        command: |
          cd backend
          npm install
    - run:
        name: Run backend unit tests
        command: |
          cd backend
          npm run test
            
  # scan-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]      
  #     - run:
  #         name: Scan front-end dependencies
  #         command: |
  #           cd frontend
  #           npm install
  #           npm audit fix --audit-level=critical --force
  #           npm audit fix --force

  # scan-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Scan Back-end dependencies
  #         command: |
  #           cd backend
  #           npm install
  #           npm audit fix --audit-level=critical --force
  #           npm audit fix --force
      
  # deploy-infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run: 
  #         name: install tar and gzip
  #         command: |
  #           yum -y install tar gzip

  #     - run:
  #         name: Ensure back-end infrastructure exists
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/backend.yml \
  #             --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:7} \
  #             --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
  #     - run:
  #         name: Ensure front-end infrastructure exist
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/frontend.yml \
  #             --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:7} \
  #             --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
  #     - run:
  #         name: Add back-end ip to ansible inventory
  #         command: |
  #           cd .circleci/ansible
  #           aws ec2 describe-instances \
  #                 --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #                 --filters "Name=tag:project,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
  #                 --output text >> inventory.txt

  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - .circleci/ansible/inventory.txt

  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
  #         # Here's where you will add some code to rollback on failure    

  # configure-infrastructure:
  #   docker:
  #     - image: cimg/python:3.9.13
  #   steps:
  #     - checkout 
  #     - add_ssh_keys:
  #         fingerprints: [56:0e:43:58:88:81:d7:a3:19:12:c9:bb:ec:3e:20:ba]
      
  #     - attach_workspace:
  #         at: .

  #     - run:
  #         name: Install tar gzip
  #         command: |
  #           sudo apt-get update
  #           sudo apt -y install python3 tar gzip

  #     - run:
  #         name: Install aws cli
  #         command: |
  #           sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  #           sudo unzip awscliv2.zip
  #           sudo ./aws/install
      
  #     - run:
  #         name: Install ansible
  #         command: |
  #           sudo apt update
  #           sudo apt install software-properties-common
  #           sudo add-apt-repository --yes --update ppa:ansible/ansible
  #           sudo apt install ansible

  #     - run:
  #         name: Configure server
  #         command: |
  #           cd .circleci/ansible
  #           ansible-playbook -i inventory.txt configure-server.yml -vvvv

  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
           

  # run-migrations:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout

  #     - restore_cache:
  #         keys: [backend-build]

  #     - run:
  #         name: Install aws cli
  #         command: |
  #           sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  #           sudo unzip awscliv2.zip
  #           sudo ./aws/install

  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           npm install 
  #           npm run migrations > migrations_dump.txt

  #     - run:
  #         name: Send migration results to memstash or kvdb
  #         command: | if grep -q "has been executed successfully." backend/migrations_dump.txt
  #             then 
  #                 # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
  #                 # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
  #                 # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
  #                 curl https://kvdb.io/7BxNdfG935QsDip7KHcMTR/migrtion_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
  #             fi
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # deploy-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: .
  #     - run:
  #         name: Install tar gzip
  #         command: |
  #           sudo  apt -y install python3 tar gzip
      
  #     - run:
  #         name: Install aws-cli ansible
  #         command: |
  #           sudo apt-get -y update
  #           sudo apt-get -y install awscli ansible

  #     - run:
  #         name: Get backend url
  #         command: |
  #           export BACKEND_IP=$(aws ec2 describe-instances \
  #                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #                  --filters "Name=tag:project,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
  #                  --output text)
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "API_URL = ${API_URL}"
  #           echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
  #           cat frontend/.env

  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run build
  #           tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
  #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
                    
  # deploy-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout 
  #     - add_ssh_keys:
  #           fingerprints: [56:0e:43:58:88:81:d7:a3:19:12:c9:bb:ec:3e:20:ba]
  #     - attach_workspace:
  #         at: .
  #     - run:
  #         name: Install tar gzip
  #         command: |
  #           sudo apt -y install python3 tar gzip
  #     - run: 
  #         name: Install aws-cli ansible
  #         command: |
  #           sudo apt-get -y update
  #           sudo apt-get -y install awscli ansible
  #     - run:
  #         name: Install aws-cli npm node ansible
  #         command: |
  #           sudo apt -y install awscli ansible
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           cd backend
  #           touch .env
  #           echo ENVIROMENT=development >> ".env"
  #           echo TYPEORM_CONNECTION=postgres >> ".env"
  #           echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
  #           echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
  #           echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
  #           echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
  #           echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
  #           echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
  #           echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
  #           echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
  #           cat .env
  #           npm install
  #           npm run build
  #           cd ..
  #           tar -C backend -czvf artifact.tar.gz .
  #           mv artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/tasks/
  #           cd .circleci/ansible
  #           echo "Contents of the inventory.txt file is -------"
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt deploy-backend.yml -vvvv

  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # smoke-test:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           sudo apt-get -y update
  #           sudo apt-get -y install curl awscli
  #     - run:
  #         name: Backend smoke test.
  #         command: |
  #           #Fetch and prepare the BACKEND_IP env var
  #           export BACKEND_IP=$(aws ec2 describe-instances \
  #                 --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #                 --filters "Name=tag:project,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
  #                 --output text)
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "${API_URL}"
  #           sudo chmod +x ./backend.sh
  #           ./backend.sh
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #           URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
  #           echo ${URL} 
  #           sudo chmod +x ./frontend.sh
  #           ./frontend.sh
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # cloudfront-update:
  #   docker:
  #     - image: cimg/node:13.8.0
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           sudo apt-get -y update
  #           sudo apt-get -y install curl nodejs npm awscli
  #     - attach_workspace:
  #         at: .
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           export OldWorkflowID=$(aws cloudformation \
  #                   list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
  #                   --no-paginate --output text)
                    
  #           echo $OldWorkflowID >> ./OldWorkflowID.txt
  #           cat ./OldWorkflowID.txt
            
            cd .circleci/files/
            aws cloudformation deploy \
                    --template-file cloudfront.yml \
                    --stack-name InitialStack \
                    --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                    --tags project=udapeople
          
  #           echo OldWorkflowID: "${OldWorkflowID}"
  #           echo Current Workflow ID: "${CIRCLE_WORKFLOW_ID:0:7}"
            
  #     - persist_to_workspace:
  #         root: .
  #         paths:
  #           - ./OldWorkflowID.txt
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # cleanup:
  #   docker:
  #     - image: cimg/node:13.8.0
  #   steps:
  #     - checkout
      
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           sudo apt-get -y update
  #           sudo apt-get -y install curl awscli
      
  #     - attach_workspace:
  #         at: .

  #     - run:
  #         name: Get old stack workflow id
  #         command: |
  #           # Get the current stacks in the regions that were deployed successfully
  #           export STACKS=($(aws cloudformation list-stacks \
  #                           --query "StackSummaries[*].StackName" \
  #                           --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
  #           echo Stack names: "${STACKS[@]}"

  #           # Get the Old Workflow update from KVDB.io
  #           export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/old_workflow_id)
  #           echo Old Workflow ID: $OldWorkflowID

  #           # Check if in the list of the stacks there's some stacks that has the Old Worfkflow update in their name
  #           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
  #           then
  #               # If yes empty the bucket associated with the frontend stack and delete the stacks
  #               aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
  #               aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
  #               aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
  #           fi
            
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]

